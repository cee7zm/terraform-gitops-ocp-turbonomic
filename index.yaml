id: github.com/cloud-native-toolkit/terraform-gitops-ocp-turbonomic
name: gitops-ocp-turbonomic
type: terraform
description: Module to install Turbonomic via Gitops
tags:
  - tools
  - gitops
versions: [{platforms: [kubernetes, ocp4], dependencies: [{id: gitops, refs: [{source: github.com/cloud-native-toolkit/terraform-tools-gitops.git, version: ">= 1.1.0"}]}, {id: namespace, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-namespace.git, version: ">= 1.10.0"}]}, {id: storageclass, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-ocp-storageclass.git, version: ">= 1.2.0"}]}], variables: [{name: gitops_config, moduleRef: {id: gitops, output: gitops_config}, type: "object({\n    boostrap = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    infrastructure = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    services = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    applications = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n  })", description: Config information regarding the gitops repo structure}, {name: git_credentials, moduleRef: {id: gitops, output: git_credentials}, type: "list(object({\n    repo = string\n    url = string\n    username = string\n    token = string\n  }))", description: The credentials for the gitops repo(s)}, {name: server_name, moduleRef: {id: gitops, output: server_name}, type: string, description: The name of the server, default: default, optional: true}, {name: namespace, moduleRef: {id: namespace, output: name}, type: string, description: Name of the existing namespace where turbo will be deployed., default: turbonomic, optional: true}, {name: kubeseal_cert, moduleRef: {id: gitops, output: sealed_secrets_cert}, type: string, description: The certificate/public key used to encrypt the sealed secrets, default: "", optional: true}, {name: storage_class_name, moduleRef: {id: storageclass, output: storage_name}, type: string, description: Name of the block storage class to use - if multizone deployment then waitforfirstconsumer must be set on storageclass binding mode}, {name: probes, type: list(string), description: The probes to deploy with turbonomic, default: ["kubeturbo","instana","openshiftingress"], optional: true}], version: v1.0.2}, {platforms: [kubernetes, ocp4], dependencies: [{id: gitops, refs: [{source: github.com/cloud-native-toolkit/terraform-tools-gitops.git, version: ">= 1.1.0"}]}, {id: cluster, refs: [{source: github.com/ibm-garage-cloud/terraform-ibm-container-platform, version: ">= 1.7.0"}, {source: github.com/ibm-garage-cloud/terraform-ibm-ocp-vpc, version: ">= 1.0.0"}, {source: github.com/ibm-garage-cloud/terraform-k8s-ocp-cluster, version: ">= 2.0.0"}]}, {id: namespace, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-namespace.git, version: ">= 1.10.0"}]}, {id: argocd-bootstrap, refs: [{source: github.com/cloud-native-toolkit/terraform-tools-argocd-bootstrap.git, version: ">= 1.5.1"}]}, {id: cert, refs: [{source: github.com/cloud-native-toolkit/terraform-util-sealed-secret-cert.git, version: ">= 1.0.0"}]}, {id: olm, refs: [{source: github.com/ibm-garage-cloud/terraform-software-olm.git, version: ">= 1.3.2"}]}, {id: resource-group, refs: [{source: github.com/cloud-native-toolkit/terraform-ibm-resource-group.git, version: ">= 3.0.1"}]}, {id: service-account, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-service-account.git, version: ">= 1.6.0"}]}, {id: storageclass, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-ocp-storageclass.git, version: ">= 1.2.0"}]}], variables: [{name: gitops_config, moduleRef: {id: gitops, output: gitops_config}, type: "object({\n    boostrap = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    infrastructure = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    services = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    applications = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n  })", description: Config information regarding the gitops repo structure}, {name: git_credentials, moduleRef: {id: gitops, output: git_credentials}, type: "list(object({\n    repo = string\n    url = string\n    username = string\n    token = string\n  }))", description: The credentials for the gitops repo(s)}, {name: server_name, moduleRef: {id: gitops, output: server_name}, type: string, description: The name of the server, default: default, optional: true}, {name: cluster_type, moduleRef: {id: cluster, output: platform.type_code}, type: string, description: The cluster type (openshift or ocp3 or ocp4 or kubernetes), default: ocp4, optional: true}, {name: cluster_ingress_hostname, moduleRef: {id: cluster, output: platform.ingress}, type: string, description: Ingress hostname of the IKS cluster., default: "", optional: true}, {name: tls_secret_name, moduleRef: {id: cluster, output: platform.tls_secret}, type: string, description: The name of the secret containing the tls certificate values, default: "", optional: true}, {name: namespace, moduleRef: {id: namespace, output: name}, type: string, description: Name of the existing namespace where turbo will be deployed., default: turbonomic, optional: true}, {name: kubeseal_cert, moduleRef: {id: gitops, output: sealed_secrets_cert}, type: string, description: The certificate/public key used to encrypt the sealed secrets, default: "", optional: true}, {name: storage_class_name, moduleRef: {id: storageclass, output: storage_name}, type: string, description: Name of the block storage class to use - if multizone deployment then waitforfirstconsumer must be set on storageclass binding mode}, {name: service_account_name, moduleRef: {id: service-account, output: name}, type: string, description: The name of the service account that should be used for the deployment, default: t8c-operator, optional: true}, {name: probes, type: list(string), description: The probes to deploy with turbonomic, default: '[kubeturbo,instana,openshiftingress]', optional: true}], version: v1.0.1}, {platforms: [kubernetes, ocp4], dependencies: [{id: gitops, refs: [{source: github.com/cloud-native-toolkit/terraform-tools-gitops.git, version: ">= 1.1.0"}]}, {id: cluster, refs: [{source: github.com/ibm-garage-cloud/terraform-ibm-container-platform, version: ">= 1.7.0"}, {source: github.com/ibm-garage-cloud/terraform-ibm-ocp-vpc, version: ">= 1.0.0"}, {source: github.com/ibm-garage-cloud/terraform-k8s-ocp-cluster, version: ">= 2.0.0"}]}, {id: namespace, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-namespace.git, version: ">= 1.10.0"}]}, {id: argocd-bootstrap, refs: [{source: github.com/cloud-native-toolkit/terraform-tools-argocd-bootstrap.git, version: ">= 1.5.1"}]}, {id: cert, refs: [{source: github.com/cloud-native-toolkit/terraform-util-sealed-secret-cert.git, version: ">= 1.0.0"}]}, {id: olm, refs: [{source: github.com/ibm-garage-cloud/terraform-software-olm.git, version: ">= 1.3.2"}]}, {id: resource-group, refs: [{source: github.com/cloud-native-toolkit/terraform-ibm-resource-group.git, version: ">= 3.0.1"}]}, {id: service-account, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-service-account.git, version: ">= 1.5.0"}]}, {id: storageclass, refs: [{source: github.com/cloud-native-toolkit/terraform-gitops-ocp-storageclass.git, version: ">= 1.2.0"}]}], variables: [{name: gitops_config, moduleRef: {id: gitops, output: gitops_config}, type: "object({\n    boostrap = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    infrastructure = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    services = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n    applications = object({\n      argocd-config = object({\n        project = string\n        repo = string\n        url = string\n        path = string\n      })\n      payload = object({\n        repo = string\n        url = string\n        path = string\n      })\n    })\n  })", description: Config information regarding the gitops repo structure}, {name: git_credentials, moduleRef: {id: gitops, output: git_credentials}, type: "list(object({\n    repo = string\n    url = string\n    username = string\n    token = string\n  }))", description: The credentials for the gitops repo(s)}, {name: server_name, moduleRef: {id: gitops, output: server_name}, type: string, description: The name of the server, default: default, optional: true}, {name: cluster_type, moduleRef: {id: cluster, output: platform.type_code}, type: string, description: The cluster type (openshift or ocp3 or ocp4 or kubernetes), default: ocp4, optional: true}, {name: cluster_ingress_hostname, moduleRef: {id: cluster, output: platform.ingress}, type: string, description: Ingress hostname of the IKS cluster., default: "", optional: true}, {name: tls_secret_name, moduleRef: {id: cluster, output: platform.tls_secret}, type: string, description: The name of the secret containing the tls certificate values, default: "", optional: true}, {name: namespace, moduleRef: {id: namespace, output: name}, type: string, description: Name of the existing namespace where turbo will be deployed., default: turbonomic, optional: true}, {name: kubeseal_cert, moduleRef: {id: gitops, output: sealed_secrets_cert}, type: string, description: The certificate/public key used to encrypt the sealed secrets, default: "", optional: true}, {name: storage_class_name, moduleRef: {id: storageclass, output: storage_name}, type: string, description: Name of the block storage class to use - if multizone deployment then waitforfirstconsumer must be set on storageclass binding mode}, {name: service_account_name, moduleRef: {id: service-account, output: name}, type: string, description: The name of the service account that should be used for the deployment, default: t8c-operator, optional: true}, {name: probes, type: list(string), description: The probes to deploy with turbonomic, default: '[kubeturbo,instana,openshiftingress]', optional: true}], version: v1.0.0}]
